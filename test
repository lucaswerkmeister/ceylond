#!/bin/bash

function die {
    local format="$1"
    shift
    tput setaf 1
    printf >&2 "$format\n" "$@"
    tput sgr0
    exit 1
}

function quietly {
    if [[ $(type -t chronic) == file ]] && ! [[ -v loudly ]]; then
        chronic "$@";
    else
        "$@";
    fi
}

function build-jvm {
    quietly ceylon compile de.lucaswerkmeister.ceylond.{core,recordBased,packetBased,daemonizeProgram,languageServerProtocol} test.de.lucaswerkmeister.ceylond || die 'JVM build error'
    quietly ceylon fat-jar test.de.lucaswerkmeister.ceylond || die 'JVM jar error'
}
function build-js {
    quietly ceylon compile-js de.lucaswerkmeister.ceylond.{core,recordBased,packetBased,daemonizeProgram,languageServerProtocol} test.de.lucaswerkmeister.ceylond || die 'JS build error'
    if [[ -v nocopydeps ]]; then
        deps=()
    else
        deps=(--with-dependencies --include-language)
    fi
    quietly ceylon copy --js "${deps[@]}" --out node_modules de.lucaswerkmeister.ceylond.{core,recordBased,packetBased,daemonizeProgram,languageServerProtocol} test.de.lucaswerkmeister.ceylond || die 'JS copy error'
}
function build {
    for backend in ${backends:-jvm js}; do
        "build-$backend"
    done
}

function sock-act {
    local function="$1"
    local where="${2:-/tmp/mysocket}"
    local options=("${@:2}")
    case $backend in
        jvm) quietly systemd-socket-activate -E LC_ALL=en_US.UTF-8 -E LC_MESSAGES=C --listen "$where" --inetd /usr/bin/java -jar test.de.lucaswerkmeister.ceylond-1.0.0.jar "$function" "${options[@]}";;
        js) quietly systemd-socket-activate -E LC_ALL=en_US.UTF-8 -E LC_MESSAGES=C --listen "$where" /usr/bin/node -e "require('test/de/lucaswerkmeister/ceylond/1.0.0/test.de.lucaswerkmeister.ceylond-1.0.0').run()" dummy "$function" "${options[@]}";;
        *) die 'Unknown backend %s' "$backend";;
    esac
}

function write-then-assert-equals {
    local content="$1"
    local expected="$2"
    local actual="$({ printf '%s' "$content"; sleep 1s; } | socat /tmp/mysocket -)"
    local test="${FUNCNAME[1]}"
    wait %% || die '%s/%s: failed' "$test" "$backend"
    if [[ "$expected" == "$actual" ]]; then
        tput setaf 2; printf '%s/%s: success\n' "$test" "$backend"; tput sgr0
    else
        die '%s/%s: expected\n%q\nbut was\n%q\n' "$test" "$backend" "$expected" "$actual"
    fi
}
function write-then-assert-success {
    local content="$1"
    local test="${FUNCNAME[1]}"
    { printf '%s' "$content"; sleep 1s; } | socat /tmp/mysocket -;
    if wait %%; then
        tput setaf 2; printf '%s/%s: success\n' "$test" "$backend"; tput sgr0
    else
        die '%s/%s: failed' "$test" "$backend"
    fi
}

function greeter-direct {
    sock-act greeter_direct & sleep 0.2s
    write-then-assert-equals Lucas $'Hello, World! Please supply your name.\nGreetings, Lucas!\nGoodbye.'
}
function greeter-record {
    sock-act greeter_record & sleep 0.2s
    write-then-assert-equals $'Lucas\n' $'Hello, World! Please supply your name.\nGreetings, Lucas!\nGoodbye.'
}
function record-separator {
    sock-act record_separator & sleep 0.2s
    write-then-assert-success 'ababbaabbcdabababbaabaababbaababbaababbaabbefababbaabaghababbaaba'
}
function http-server {
    local port=${http_server_port:-8080}
    sock-act http_server "$port" & sleep 0.2s
    expected_info='test.de.lucaswerkmeister.ceylond/1.0.0 on Ceylon 1.3.1 “Now We Try It My Way”'
    expected_greeting='Hello, World!'
    actual_info=$(curl -s http://localhost:"$port"/info)
    actual_greeting=$(curl -s http://localhost:"$port"/greeting)
    curl -s -X QUIT http://localhost:"$port"/
    if ! wait %%; then
        die 'http-server/%s: failed' "$backend"
    fi
    if [[ "$expected_info" != "$actual_info" ]]; then
        die 'http-server/%s: expected \n%q\nbut was\n%q\n' "$backend" "$expected_info" "$actual_info"
    elif [[ "$expected_greeting" != "$actual_greeting" ]]; then
        die 'http-server/%s: expected \n%q\nbut was\n%q\n' "$backend" "$expected_greeting" "$actual_greeting"
    else
        tput setaf 2; printf 'http-server/%s: success\n' "$backend"; tput sgr0
    fi
}
function packet-based {
    quietly make packet-based || die 'packet-based/%s: make error' "$backend"
    sock-act packet_based & sleep 0.2s
    if ! ./packet-based || ! wait %%; then
        die 'packet_based/%s: failed' "$backend"
    else
        tput setaf 2; printf 'packet-based/%s: success\n' "$backend"; tput sgr0
    fi
}

function greeter-daemonize {
    quietly make -C client -f Makefile-test-"${FUNCNAME[0]}" || die 'greeter-daemonize: make error'
    sock-act greeter_daemonize "" --noDefaultLogWriter & sleep 0.2s
    local expected=$'Hello, World! Please supply your name.\nGreetings, Lucas!\nGoodbye.'
    local actual="$(printf 'Lucas\n' | client/greeter_client 2>&1)"
    kill %% && { wait %%; true; } 2>/dev/null || die 'greeter-daemonize: could not kill daemon' # silence job control output with {wait}2>/dev/null
    if [[ "$expected" == "$actual" ]]; then
        tput setaf 2; printf 'greeter-daemonize/%s: success\n' "$backend"; tput sgr0
    else
        die 'greeter-daemonize/%s: expected\n%q\nbut was\n%q\n' "$backend" "$expected" "$actual"
    fi
}

function cat-daemonize {
    [[ "$backend" == jvm ]] || return 0
    quietly make -C client -f Makefile-test-"${FUNCNAME[0]}" || die 'cat-daemonize: make error'
    sock-act cat_daemonize "" --noDefaultLogWriter & sleep 0.2s
    local expected="$(printf '%*s' 4097)"
    local actual="$(printf '%s' "$expected" | client/cat 2>&1)"
    kill %% && { wait %%; true; } 2>/dev/null || die 'cat-daemonize: could not kill daemon' # silence job control output with {wait}2>/dev/null
    if [[ "$expected" == "$actual" ]]; then
        tput setaf 2; printf 'cat-daemonize/%s: success\n' "$backend"; tput sgr0
    else
        die 'cat-daemonize/%s: expected\n%q\nbut was\n%q\n' "$backend" "$expected" "$actual"
    fi
}

function unit {
    if case $backend in
           jvm) quietly ceylon test test.de.lucaswerkmeister.ceylond/1.0.0;;
           js) quietly ceylon test-js test.de.lucaswerkmeister.ceylond/1.0.0;;
           *) die 'Unknown backend %s' "$backend";;
       esac; then
        tput setaf 2; printf 'unit/%s: success\n' "$backend"; tput sgr0
    else
        die 'unit/%s: failed' "$backend"
    fi
}

if ! [[ -v nobuild ]]; then
    build
fi
for test in ${tests:-greeter-direct greeter-record record-separator http-server packet-based greeter-daemonize cat-daemonize unit}; do
    for backend in ${backends:-jvm js}; do
        $test || die 'Unhandled error in %s' "$test"
    done
done
tput setaf 2; echo SUCCESS; tput sgr0
